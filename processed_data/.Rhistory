"RT_all_irr" = rtsallgen[,1],
"RT_all_tar" = rtsallgen[,3],
"SD_all_irr" = sdsallgen[,1],
"ER_all_pro" = errorsallgen[,2],
"ER_all_irr" = errorsallgen[,1],
"ER_all_tar" = errorsallgen[,3],
"ERSD_all_irr" = errorsallsdgen[,1],
"PI" = rtsallgen[,2] - rtsallgen[,1],
"TI" = rtsallgen[,3] - rtsallgen[,1],
"TP" = rtsallgen[,3] - rtsallgen[,2],
"d_all" = round((rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1], 2)
)
EF$ERPI = errorsallgen[,2] - errorsallgen[,1]
nrow(EF)
table(EF$ER_all_tar < .5)
EF = EF[EF$ER_all_tar < .5, ]
table(EF$ER_all_pro < .5)
EF = EF[EF$ER_all_pro < .5, ]
table(EF$ER_all_irr < .5)
EF = EF[EF$ER_all_irr < .5, ]
table(EF$valid > (x/2))
EF = EF[EF$valid > (x/2), ]
library("pROC")
head(EF)
auc(EF$cond,  EF$d_all, levels=c(1,0))
auc(EF$cond,  EF$d_all, levels=c(1,2))
auc(EF$cond,  EF$d_all, levels=c(0,2))
levels(EF$cond)
table(EF$cond)
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non; ci(inn_non)
inn_mot = auc(EF$cond,  EF$d_all, levels=c(1,2)); inn_mot; ci(inn_mot)
table(EF$d_all > .2, EF$cond)
table(EF$d_all < .2, EF$cond)
prop.table(table(EF$d_all < .2, EF$cond), 2)
inn_non = auc(EF$cond,  EF$d_all, levels=c(1,0)); inn_non; ci(inn_non)
inn_mot = auc(EF$cond,  EF$d_all, levels=c(1,2)); inn_mot; ci(inn_mot)
roc.test(inn_non, inn_mot)
roc.test(inn_non, inn_mot, method = "d")
roc.test(inn_non, inn_mot, method = "b")
rm(list = ls())
setwd("/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup")
rawdata = read.table("fulltest_motivation_reliability_16Mar.txt", header=T)
testip = as.data.frame(table(rawdata$ip)/x)
runs = x = 360
testip = as.data.frame(table(rawdata$ip)/x)
testip
testip2 = as.vector(testip[testip[,2] > 1, ][,1])
rawdata = rawdata[!(rawdata$ip %in% testip2),]
rawdata = droplevels(rawdata)
D = rawdata[(rawdata$rt >= 150) & (rawdata$rt <= 800) & (rawdata$corr == 1),]
Dinclerrors = rawdata[(rawdata$corr < 9999),]
#put into dataframe 150-800
validcases = tapply(D$trial, D$unid, length)
rtsallgen = round(tapply(D$rt, list(D$unid, D$type), mean),3)
sdsallgen = round(tapply(D$rt, list(D$unid, D$type), sd), 3)
rtsanimal = round(tapply(D$rt, list(D$unid, D$type, D$cat == "animal"), mean),3)
sdsanimal = round(tapply(D$rt, list(D$unid, D$type, D$cat == "animal"), sd),3)
rtscolor = round(tapply(D$rt, list(D$unid, D$type, D$cat == "color"), mean),3)
sdscolor = round(tapply(D$rt, list(D$unid, D$type, D$cat == "color"), sd),3)
rtsice = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ice"), mean),3)
sdsice = round(tapply(D$rt, list(D$unid, D$type, D$cat == "ice"), sd),3)
errorsallgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsdgen = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsall = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), mean), 3)
errorsallsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type), sd), 3)
errorsanimal = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), mean), 3)
errorsanimalsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "animal"), sd), 3)
errorscolor = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), mean), 3)
errorscolorsd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "color"), sd), 3)
errorsice = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), mean), 3)
errorsicesd = round(1 - tapply(Dinclerrors$corr, list(Dinclerrors$unid, Dinclerrors$type, Dinclerrors$cat == "ice"), sd), 3)
diffgen = (rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1]
#unid in D longer than in aggregated variables!
EF = data.frame(
"age" = tapply(D$age, D$unid, mean),
"gender" = tapply(D$gender, D$unid, mean),
"cond" = tapply(D$cond, D$unid, mean),
"unid" = as.data.frame(table(D$unid))$Var1,
"valid" = tapply(D$trial, D$unid, length),
"RT_all_pro" = rtsallgen[,2],
"RT_all_irr" = rtsallgen[,1],
"RT_all_tar" = rtsallgen[,3],
"SD_all_irr" = sdsallgen[,1],
"ER_all_pro" = errorsallgen[,2],
"ER_all_irr" = errorsallgen[,1],
"ER_all_tar" = errorsallgen[,3],
"ERSD_all_irr" = errorsallsdgen[,1],
"P-I" = rtsallgen[,2] - rtsallgen[,1],
"T-I" = rtsallgen[,3] - rtsallgen[,1],
"T-P" = rtsallgen[,3] - rtsallgen[,2],
"dCIT" = round((rtsallgen[,2] - rtsallgen[,1]) / sdsallgen[,1], 2)
)
nrow(EF)
EF$ERPI = errorsallgen[,2] - errorsallgen[,1]
table(EF$ER_all_tar < .5)
EF = EF[EF$ER_all_tar < .5, ]
table(EF$ER_all_pro < .5)
EF = EF[EF$ER_all_pro < .5, ]
table(EF$ER_all_irr < .5)
EF = EF[EF$ER_all_irr < .5, ]
table(EF$valid > (x/2))
EF = EF[EF$valid > (x/2), ]
library("pROC")
head(EF)
prop.table(table(EF$d_all < .2, EF$cond), 2)
prop.table(table(EF$dCIT < .2, EF$cond), 2)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_hig, method = "v")
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_non, inn_hig, method = "d")
rm(list = ls())
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup/full_16Mar')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
head(EFn)
names(EFn)
data$cattest = apply(data[, c(24, 27, 30)], 1, mean)
EFn$cattest = apply(EFn[, c(24, 27, 30)], 1, mean)
head(EFn)
summary(aov(EFn$cattest ~ EF$cond))
summary(aov(EFn$cattest ~ EFn$cond))
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
table(EFn$ER_all_tar < .5)
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
x = 360
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
hammer = 565
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,610,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 575
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 555
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
setwd("/Users/bennettkleinberg/Documents/Research/PhD Amsterdam/nwo_aanvraag")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
citations = 4924
followers = 770
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 75 #based on google scholar
followers = 1273 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 8379 #based on google scholar
followers = 2240 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
library(equivalence)
df = data.frame('a' = rnorm(100, 2, 1))
df$b = rnorm(100, 1, 1)
mean(df$a)
mean(df$b)
library(equivalence)
df = data.frame('a' = rnorm(1000, 2, 1))
df$b = rnorm(1000, 1, 1)
mean(df$a)
mean(df$b)
df = data.frame('a' = rnorm(10000, 2, 1))
df$b = rnorm(10000, 1, 1)
mean(df$a)
mean(df$b)
t.test(df$a, df$b)
tost(x = df$a
, y = df$b,
, epsilon = 2
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = 1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = .1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
mean(df$a)
mean(df$b)
tost(x = df$a
, y = df$b,
, epsilon = 1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = 2
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
a = 1:5
b = 12:17
a
a*b
a = 1:5
b = 12:16
a*b
a%*%b
#####START
#HOTEL REVIEWS ANALYSIS
#R pipeline
#clear ws
rm(list = ls())
#load deps
require(pROC)
require(stringr)
require(splitstackshape)
require(ez)
require(FactoMineR)
library(MASS)
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/R_script/R tutorials')
source("cohensf.R")
source("dz_within_ci.R")
source("ds_between_ci.R")
#set wd
setwd('/Users/bennettkleinberg/GitHub/information_specificity/processed_data')
files = list.files()
#####START
#HOTEL REVIEWS ANALYSIS
#R pipeline
#clear ws
rm(list = ls())
#load deps
require(pROC)
require(stringr)
require(splitstackshape)
require(ez)
require(FactoMineR)
library(MASS)
# setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/R_script/R tutorials')
# source("cohensf.R")
# source("dz_within_ci.R")
# source("ds_between_ci.R")
#set wd
setwd('/Users/bennettkleinberg/GitHub/information_specificity/processed_data')
files = list.files()
files
load(files[1])
names(data)
data$filename_norm = str_extract(data$filename, '_(.+)\\d')
#descriptives
tapply(data$nwords, list(data$polarity_str, data$veracity_str), mean)
tapply(data$nwords, list(data$polarity_str, data$veracity_str), sd)
names(datax)
datax = data[-c(4:6), ]
#set variables
data$ner_unique_prop = (data$ner_unique/data$nwords)*100
data$st_spec = round(data$spec_avg*100, 2)
data$liwc_detailedness = data$percept + data$time + data$space
data$ner_unique_verif_prop = (data$nperson_unique + data$nfac_unique + data$ngpe_unique + data$nloc_unique + data$norg_unique + data$nevent_unique + data$ndate_unique + data$ntime_unique + data$nmoney_unique)/data$nwords*100
data$ner_unique_zerocounts_prop = (data$nperson_unique + data$nfac_unique + data$ndate_unique + data$ntime_unique + data$nmoney_unique + data$nordinal_unique + data$ncardinal_unique)/data$nwords*100
which.max(data$ner_unique_prop)
data[which.max(data$ner_unique_prop),]
data[which.max(data$ner_unique_prop), 'unid']
data[which.max(data$ner_unique_prop), 'filename_norm']
data[which.max(data$ner_unique_prop), 'filename']
