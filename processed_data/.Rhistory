prop.table(table(EF$d_all < .2, EF$cond), 2)
prop.table(table(EF$dCIT < .2, EF$cond), 2)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
inn_non = auc(EF$cond,  EF$dCIT, levels=c(0,1)); inn_non; ci(inn_non)
inn_low = auc(EF$cond,  EF$dCIT, levels=c(0,2)); inn_low; ci(inn_low)
inn_hig = auc(EF$cond,  EF$dCIT, levels=c(0,3)); inn_hig; ci(inn_hig)
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_hig, method = "v")
roc.test(inn_non, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_low, inn_hig, method = "d")
roc.test(inn_non, inn_low, method = "d")
roc.test(inn_non, inn_hig, method = "d")
rm(list = ls())
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup/full_16Mar')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/outputfiles/motivation_followup')
EFn = read.table("fulltest_16Mar_endfile_7May2015.txt", header=T)
head(EFn)
names(EFn)
data$cattest = apply(data[, c(24, 27, 30)], 1, mean)
EFn$cattest = apply(EFn[, c(24, 27, 30)], 1, mean)
head(EFn)
summary(aov(EFn$cattest ~ EF$cond))
summary(aov(EFn$cattest ~ EFn$cond))
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
table(EFn$ER_all_tar < .5)
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
x = 360
table(EFn$ER_all_tar < .5)
EFn = EFn[EFn$ER_all_tar < .5, ]
table(EFn$ER_all_pro < .5)
EFn = EFn[EFn$ER_all_pro < .5, ]
table(EFn$ER_all_irr < .5)
EFn = EFn[EFn$ER_all_irr < .5, ]
table(EFn$valid > (x/2))
EFn = EFn[EFn$valid > (x/2), ]
summary(aov(EFn$cattest ~ as.factor(EFn$cond)))
tapply(EFn$cattest, EFn$cond, mean)
tapply(EFn$cattest, EFn$cond, sd)
hammer = 565
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,610,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 575
knife = 505
gun = 495
stick = 498
bat = 503
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,650,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 555
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 590),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,550,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="Mean reaction time")
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
setwd("/Users/bennettkleinberg/Documents/Research/PhD Amsterdam/nwo_aanvraag")
hammer = 565
knife = 480
gun = 482
stick = 475
bat = 488
all = c(knife, hammer, gun, stick, bat)
par(mfrow=c(1,2))
png(filename = "bar_graph_NWO_05102015.png",
width = 32, height = 20, units = "cm", pointsize = 20,
bg = "white",  res = 300)
barplot(all,
xlab = "",
ylab = "",
names.arg = c("GUN", "HAMMER", "KNIFE", "STICK", "BAT"),
space = .3,
ylim = c(450, 600),
axes=F,
xpd = F,
col = c("black"),
density = c(100, 20, 100, 100, 100)
)
axis(side=2, at=seq(450,600,50), las=2)
title(#"Expected result in memory detection test.",
#xlab="Stimulus",
ylab="RTs")
dev.off()
citations = 4924
followers = 770
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 75 #based on google scholar
followers = 1273 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
citations = 8379 #based on google scholar
followers = 2240 #twitter
Fc = 43.3*(citations^0.32)
Fa = followers
Kindex = Fa/Fc
Kindex
library(equivalence)
df = data.frame('a' = rnorm(100, 2, 1))
df$b = rnorm(100, 1, 1)
mean(df$a)
mean(df$b)
library(equivalence)
df = data.frame('a' = rnorm(1000, 2, 1))
df$b = rnorm(1000, 1, 1)
mean(df$a)
mean(df$b)
df = data.frame('a' = rnorm(10000, 2, 1))
df$b = rnorm(10000, 1, 1)
mean(df$a)
mean(df$b)
t.test(df$a, df$b)
tost(x = df$a
, y = df$b,
, epsilon = 2
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = 1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = .1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
mean(df$a)
mean(df$b)
tost(x = df$a
, y = df$b,
, epsilon = 1
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
tost(x = df$a
, y = df$b,
, epsilon = 2
#, paired
, var.equal = T
#, conf.level = xx
, alpha = 0.05
)
#####START
#HOTEL REVIEWS ANALYSIS
#R pipeline
#clear ws
rm(list = ls())
#load deps
require(pROC)
require(stringr)
require(splitstackshape)
require(ez)
require(FactoMineR)
library(MASS)
setwd('/Users/bennettkleinberg/Documents/Research/app/wp_onACIT/onacit/R_script/R tutorials')
source("cohensf.R")
source("dz_within_ci.R")
source("ds_between_ci.R")
#set wd
setwd('/Users/bennettkleinberg/GitHub/information_specificity/processed_data')
files = list.files()
load(files[1])
data$filename_norm = str_extract(data$filename, '_(.+)\\d')
#descriptives
tapply(data$nwords, list(data$polarity_str, data$veracity_str), mean)
tapply(data$nwords, list(data$polarity_str, data$veracity_str), sd)
data$ner_unique_prop = (data$ner_unique/data$nwords)*100
data$st_spec = round(data$spec_avg*100, 2)
data$liwc_detailedness = data$percept + data$time + data$space
data$ner_unique_verif_prop = (data$nperson_unique + data$nfac_unique + data$ngpe_unique + data$nloc_unique + data$norg_unique + data$nevent_unique + data$ndate_unique + data$ntime_unique + data$nmoney_unique)/data$nwords*100
data$ner_unique_zerocounts_prop = (data$nperson_unique + data$nfac_unique + data$ndate_unique + data$ntime_unique + data$nmoney_unique + data$nordinal_unique + data$ncardinal_unique)/data$nwords*100
#split data per polarity for follow-ups
data_pos = data[data$polarity_str == 'positive',]
data_neg = data[data$polarity_str == 'negative',]
tapply(data$ner_unique_prop, list(data$polarity_str, data$veracity_str), mean)
tapply(data$ner_unique_prop, list(data$polarity_str, data$veracity_str), sd)
aov_ner_unique_prop <- ezANOVA(
data = data
, dv = ner_unique_prop
, wid = originalpath.x
#, wid = filename_norm
#, within = .(polarity_str, veracity_str)
, within_covariates = NULL
, between = .(polarity_str, veracity_str)
#, between = .(veracity_str)
, between_covariates = NULL
, observed = NULL
, diff = NULL
, reverse_diff = FALSE
, type = 3
, white.adjust = FALSE
, detailed = FALSE
, return_aov = T
)
aov_ner_unique_prop
names(data)
apply(data[,c(68:161)], 2, function(x){
tapply(x, list(data$polarity_str, data$veracity_str), mean)*100
})
apply(data[,c(68:161)], 2, function(x){
tapply(x, list(data$polarity_str, data$veracity_str), mean)
})
apply(data[,c(68:161)], 2, function(x){
round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
})
round(tapply(data$WC, list(data$polarity_str, data$veracity_str), mean), 2)
test = 'WC'
ezANOVA(
data = data
, dv = test
, wid = originalpath.x
, within_covariates = NULL
, between = .(polarity_str, veracity_str)
, between_covariates = NULL
, observed = NULL
, diff = NULL
, reverse_diff = FALSE
, type = 3
, white.adjust = FALSE
, detailed = FALSE
, return_aov = T
)
ezANOVA(
data = data
, dv = WC
, wid = originalpath.x
, within_covariates = NULL
, between = .(polarity_str, veracity_str)
, between_covariates = NULL
, observed = NULL
, diff = NULL
, reverse_diff = FALSE
, type = 3
, white.adjust = FALSE
, detailed = FALSE
, return_aov = T
)
aov(data$WC ~ data$polarity_str*data$veracity_str)
summary(aov(data$WC ~ data$polarity_str*data$veracity_str))
a = summary(aov(data$WC ~ data$polarity_str*data$veracity_str))
a$value
?aov
summary(a)
names(a)
a[0]
a[1]
a[1][1]
dim(a[1])
class(a)
a[2]
a[1][1,2]
a[1][[1]]
summary
summary()
aov
a$coefficients
b = aov(data$WC ~ data$polarity_str*data$veracity_str)
b$coefficients
b$effects
b$qr
b
apply(data[,c(68:70)], 2, function(x){
round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
summary(aov(x ~ data$polarity_str*data$veracity_str))
})
apply(data[,c(68:70)], 2, function(x){
print(round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2))
summary(aov(x ~ data$polarity_str*data$veracity_str))
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
print(aggr_table, generic_anova)
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
print(aggr_table)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
print(generic_anova)
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
print(aggr_table)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
#print(generic_anova)
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
aggr_table
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
#print(generic_anova)
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
#print(generic_anova)
})
?summary
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str), showValues = F)
#print(generic_anova)
})
apply(data[,c(68:70)], 2, function(x){
aggr_table = round(tapply(x, list(data$polarity_str, data$veracity_str), mean), 2)
#generic_anova = summary(aov(x ~ data$polarity_str*data$veracity_str))
generic_anova = aov(x ~ data$polarity_str*data$veracity_str)
#print(generic_anova)
})
